esphome:
  name: epaper-display-daily-weather
  friendly_name: Epaper-7.5-Modern

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
  level: DEBUG

api:

ota:
  platform: esphome
  password: !secret esp_pass

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14
  miso_pin: GPIO12

# --- Home Assistant sensor ---
sensor:
  - platform: homeassistant
    id: city_temp
    entity_id: sensor.city_temperature
    unit_of_measurement: "°C"

# --- Fonts ---
font:
  - file: 'fonts/GothamRnd-Book.ttf'
    id: font_small_book
    size: 24
    glyphs: [' ', '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','|', ':', '°', '-', '.', '>']

  - file: 'fonts/GothamRnd-Bold.ttf'
    id: font_large_bold
    size: 80
    glyphs: [' ', '0','1','2','3','4','5','6','7','8','9','°','C', ':','B','T','L', '-', '.']

  - file: 'fonts/GothamRnd-Bold.ttf'
    id: font_medium_bold
    size: 28

  - file: 'fonts/GothamRnd-Bold.ttf'
    id: font_small_bold
    size: 20

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_large
    size: 96
    glyphs: &mdi-weather-glyphs
      - "\U000F0590" # cloudy
      - "\U000F0F2F" # cloudy-alert
      - "\U000F0E6E" # cloudy-arrow-right
      - "\U000F0591" # fog
      - "\U000F0592" # hail
      - "\U000F0F30" # hazy
      - "\U000F0898" # hurricane
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0594" # night
      - "\U000F0F31" # night-partly-cloudy
      - "\U000F0595" # partly-cloudy
      - "\U000F0F32" # partly-lightning
      - "\U000F0F33" # partly-rainy
      - "\U000F0F34" # partly-snowy
      - "\U000F0F35" # partly-snowy-rainy
      - "\U000F0596" # pouring
      - "\U000F0597" # rainy
      - "\U000F0598" # snowy
      - "\U000F0F36" # snowy-heavy
      - "\U000F067F" # snowy-rainy
      - "\U000F0599" # sunny
      - "\U000F0F37" # sunny-alert
      - "\U000F14E4" # sunny-off
      - "\U000F059A" # sunset
      - "\U000F059B" # sunset-down
      - "\U000F059C" # sunset-up
      - "\U000F0F38" # tornado
      - "\U000F059D" # windy
      - "\U000F059E" # windy-variant

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_medium
    size: 36
    glyphs: *mdi-weather-glyphs

# --- Colors ---
color:
  - id: color_white
    red: 100%
    green: 100%
    blue: 100%
    white: 100%
  - id: color_black
    red: 0%
    green: 0%
    blue: 0%
    white: 0%

# --- Display ---
display:
  - platform: waveshare_epaper
    id: epaperdisplay
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin: GPIO25
    reset_pin: GPIO26
    model: 7.50in-bv3-bwr
    rotation: 90
    update_interval: 120s
    lambda: |-
      it.fill(id(color_black));
      int y = 40;

      // --- Greeting ---
      it.printf(240, 10, id(font_small_bold), id(color_white), TextAlign::TOP_CENTER, "Good Afternoon");

      // --- Current Temperature ---
      if(id(city_temp).has_state()) {
          float temp = id(city_temp).state;
          it.printf(240, y, id(font_large_bold), id(color_white), TextAlign::TOP_CENTER, "%.1f°C", temp);
          ESP_LOGD("main","city Temp: %.2f", temp);
      } else {
          it.printf(240, y, id(font_large_bold), id(color_white), TextAlign::TOP_CENTER, "--°C");
          ESP_LOGD("main","city Temp not available yet");
      }

      y += 160;

      // --- Forecast Row (example hardcoded for now) ---
      int forecast_x = 63;
      int forecast_y = y;
      int forecast_spacing = 120;

      const char* times[4] = {"9am","12pm","3pm","6pm"};
      const char* temps[4] = {"25°","24°","22°","23°"};
      const char* icons[4] = {"\U000F0599","\U000F0590","\U000F0597","\U000F0595"};

      for(int i = 0; i < 4; i++){
          int x = forecast_x + i * forecast_spacing;
          it.printf(x, forecast_y, id(font_small_bold), id(color_white), TextAlign::TOP_CENTER, "%s", times[i]);
          it.printf(x, forecast_y+24, id(font_mdi_medium), id(color_white), TextAlign::TOP_CENTER, "%s", icons[i]);
          it.printf(x, forecast_y+60, id(font_small_book), id(color_white), TextAlign::TOP_CENTER, "%s", temps[i]);
      }

      y = forecast_y + 120;

      // --- Transport Section ---
      int transport_x_center = 240 - 137;
      int transport_y = y;
      int block_spacing_y = 160;

      auto draw_transport_block = [&](const char* letter, const char* next_time, const char* line_name, const char* extra_info, int block_index){
          int x = transport_x_center;
          int y_block = transport_y + block_index * block_spacing_y;

          it.printf(x, y_block, id(font_medium_bold), id(color_white), TextAlign::TOP_LEFT, "%s", letter);
          it.printf(x + 50, y_block, id(font_medium_bold), id(color_white), TextAlign::TOP_LEFT, "%s", next_time);
          it.printf(x, y_block + 60, id(font_small_bold), id(color_white), TextAlign::TOP_LEFT, "%s", line_name);
          it.printf(x, y_block + 90, id(font_small_bold), id(color_white), TextAlign::TOP_LEFT, "%s", extra_info);
      };

      draw_transport_block("B","15:35","BUS# -> City","Type: Express | Following: 15:50",0);
      draw_transport_block("T","15:33","STATION -> City","Platform 2 | Following: 15:40",1);
      draw_transport_block("L","15:32","STATION -> City","Platform 1 | Following: 15:44",2);
